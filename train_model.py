# -*- coding: utf-8 -*-
"""train_model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yzbIjRv3kqBGLMSXIciB_HZuQel2L15E
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
import pickle
import re
import string
import nltk
from nltk.corpus import stopwords

nltk.download('stopwords')
stop_words = set(stopwords.words('english'))

def clean_text(text):
    text = text.lower()
    text = re.sub(r"http\S+|www\S+|https\S+", '', text)
    text = re.sub(r'\@[\w]*', '', text)
    text = re.sub(r'#[A-Za-z0-9_]+', '', text)
    text = text.translate(str.maketrans('', '', string.punctuation))
    text = re.sub(r'\d+', '', text)
    text = text.strip()
    text = ' '.join([word for word in text.split() if word not in stop_words])
    return text

from google.colab import files

uploaded = files.upload()

df = pd.read_csv("training.1600000.processed.noemoticon.csv",
                 encoding="latin-1",
                 names=["target", "ids", "date", "flag", "user", "text"])

df.head()

df["text"] = df["text"].apply(clean_text)
X = df["text"]
y = df["target"].replace({4: "positive", 0: "negative"})
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

vectorizer = CountVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

encoder = LabelEncoder()
y_train_enc = encoder.fit_transform(y_train)
y_test_enc = encoder.transform(y_test)

model = LogisticRegression(max_iter=1000)
model.fit(X_train_vec, y_train_enc)

with open("model.pkl", "wb") as f:
    pickle.dump(model, f)

with open("vectorizer.pkl", "wb") as f:
    pickle.dump(vectorizer, f)

with open("encoder.pkl", "wb") as f:
    pickle.dump(encoder, f)

print("âœ… Model, Vectorizer, and Encoder saved!")

def predict_sentiment(text):
    cleaned = clean_text(text)
    vec = vectorizer.transform([cleaned])
    pred = model.predict(vec)
    label = encoder.inverse_transform(pred)
    return label[0]
sample_text = "I love this product! It's amazing "
print("Sentiment:", predict_sentiment(sample_text))

from google.colab import files
files.download("model.pkl")
files.download("vectorizer.pkl")
files.download("encoder.pkl")